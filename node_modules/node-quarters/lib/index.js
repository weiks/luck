'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Quarters = function () {
  function Quarters() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Quarters);

    var msgMapping = {
      key: 'App key',
      secret: 'App secret',
      webSecret: 'App web secret',
      address: 'App address'
    };

    Object.keys(msgMapping).forEach(function (k) {
      if (!options[k]) {
        throw new Error(msgMapping[k] + ' is required.');
      }
    });

    // options
    var quartersURL = options.quartersURL || 'https://pocketfulofquarters.com';
    this.options = {
      key: options.key,
      secret: options.secret,
      webSecret: options.webSecret,
      address: options.address,
      quartersURL: quartersURL,
      apiURL: options.apiURL || 'https://api.pocketfulofquarters.com/'
    };
  }

  _createClass(Quarters, [{
    key: 'createRefreshToken',
    value: function createRefreshToken(code) {
      var data = {
        client_id: this.options.key,
        client_secret: this.options.webSecret,
        grant_type: 'authorization_code',
        code: code
      };

      return _axios2.default.post(this.options.apiURL + 'oauth/token', data).then(function (response) {
        return response.data;
      });
    }
  }, {
    key: 'createAccessToken',
    value: function createAccessToken(refreshToken) {
      var data = {
        client_id: this.options.key,
        client_secret: this.options.webSecret,
        grant_type: 'refresh_token',
        refresh_token: refreshToken
      };

      return _axios2.default.post(this.options.apiURL + 'oauth/token', data).then(function (response) {
        return response.data;
      });
    }

    // user details

  }, {
    key: 'fetchUser',
    value: function fetchUser(accessToken) {
      return _axios2.default.get(this.options.apiURL + 'me', {
        headers: {
          Authorization: 'Bearer ' + accessToken
        }
      }).then(function (response) {
        return response.data;
      });
    }

    // request transfer from quarter server

  }, {
    key: 'transferQuarters',
    value: function transferQuarters(data) {
      if (!data.amount) {
        throw new Error('`amount` is required');
      }

      if (!data.user && !data.address) {
        throw new Error('`user` or `address` is required');
      }

      var payload = {
        address: data.address,
        user: data.user,
        amount: parseInt(data.amount)

        // transfer token to provided user/address
      };var appAddress = this.options.address;
      var url = this.options.apiURL + 'accounts/' + appAddress + '/transfer';
      var opt = {
        headers: {
          Authorization: 'Bearer ' + this.options.secret
        }
      };
      return _axios2.default.post(url, payload, opt).then(function (response) {
        return response.data;
      });
    }
  }]);

  return Quarters;
}();

exports.default = Quarters;
module.exports = exports['default'];